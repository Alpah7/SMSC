package io.smsc.repository.permission;

import io.smsc.model.Permission;
import io.smsc.AbstractTest;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.test.context.support.WithMockUser;

import java.util.Arrays;
import java.util.Collection;

import static io.smsc.test_data.PermissionTestData.*;

@WithMockUser(username="Admin",roles = {"ADMIN"})
public class PermissionJPATest extends AbstractTest {

    @Test
    public void testDeletePermission() throws Exception {
        permissionRepository.delete(PERMISSION_USER_DELETE_ID);
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(PERMISSION_USER_READ,PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE, PERMISSION_USER_READ_OWN, PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ, PERMISSION_ROLE_UPDATE, PERMISSION_ROLE_CREATE, PERMISSION_ROLE_DELETE, PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE, PERMISSION_PERMISSION_CREATE, PERMISSION_PERMISSION_DELETE, PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE, PERMISSION_CRUD_CLASS_META_DATA_CREATE, PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ, PERMISSION_CRUD_META_FORM_DATA_UPDATE, PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE, PERMISSION_CRUD_META_GRID_DATA_READ, PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE, PERMISSION_CRUD_META_GRID_DATA_DELETE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE, PERMISSION_CUSTOMER_READ, PERMISSION_CUSTOMER_UPDATE,
                PERMISSION_CUSTOMER_CREATE, PERMISSION_CUSTOMER_DELETE, PERMISSION_CUSTOMER_CONTACT_READ, PERMISSION_CUSTOMER_CONTACT_UPDATE,
                PERMISSION_CUSTOMER_CONTACT_CREATE, PERMISSION_CUSTOMER_CONTACT_DELETE, PERMISSION_DASHBOARD_READ,
                PERMISSION_DASHBOARD_UPDATE, PERMISSION_DASHBOARD_CREATE, PERMISSION_DASHBOARD_DELETE, PERMISSION_DASHBOARD_BOX_READ,
                PERMISSION_DASHBOARD_BOX_UPDATE, PERMISSION_DASHBOARD_BOX_CREATE, PERMISSION_DASHBOARD_BOX_DELETE,
                PERMISSION_DASHBOARD_BOX_TYPE_READ, PERMISSION_DASHBOARD_BOX_TYPE_UPDATE, PERMISSION_DASHBOARD_BOX_TYPE_CREATE,
                PERMISSION_DASHBOARD_BOX_TYPE_DELETE), permissionRepository.findAll());
    }

    // ERROR SqlExceptionHelper - ERROR: duplicate key value violates unique constraint "permission_pkey"
    // Detail: Key (id)=(27) already exists.

//    @Test
//    public void testSavePermission() throws Exception {
//        Permission newPermission = new Permission(999L,"UNLIMITED");
//        Permission created = permissionRepository.save(newPermission);
//        newPermission.setId(created.getId());
//        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(newPermission, PERMISSION_USER_READ, PERMISSION_USER_UPDATE,
//                PERMISSION_USER_CREATE, PERMISSION_USER_DELETE, PERMISSION_USER_READ_OWN, PERMISSION_USER_UPDATE_OWN,
//                PERMISSION_ROLE_READ,PERMISSION_ROLE_UPDATE, PERMISSION_ROLE_CREATE, PERMISSION_ROLE_DELETE, PERMISSION_PERMISSION_READ,
//                PERMISSION_PERMISSION_UPDATE, PERMISSION_PERMISSION_CREATE, PERMISSION_PERMISSION_DELETE, PERMISSION_CRUD_CLASS_META_DATA_READ,
//                PERMISSION_CRUD_CLASS_META_DATA_UPDATE, PERMISSION_CRUD_CLASS_META_DATA_CREATE, PERMISSION_CRUD_CLASS_META_DATA_DELETE,
//                PERMISSION_CRUD_META_FORM_DATA_READ, PERMISSION_CRUD_META_FORM_DATA_UPDATE, PERMISSION_CRUD_META_FORM_DATA_CREATE,
//                PERMISSION_CRUD_META_FORM_DATA_DELETE, PERMISSION_CRUD_META_GRID_DATA_READ, PERMISSION_CRUD_META_GRID_DATA_UPDATE,
//                PERMISSION_CRUD_META_GRID_DATA_CREATE, PERMISSION_CRUD_META_GRID_DATA_DELETE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
//                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
//                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE, PERMISSION_CUSTOMER_READ, PERMISSION_CUSTOMER_UPDATE,
//                PERMISSION_CUSTOMER_CREATE, PERMISSION_CUSTOMER_DELETE, PERMISSION_CUSTOMER_CONTACT_READ, PERMISSION_CUSTOMER_CONTACT_UPDATE,
//                PERMISSION_CUSTOMER_CONTACT_CREATE, PERMISSION_CUSTOMER_CONTACT_DELETE, PERMISSION_DASHBOARD_READ,
//                PERMISSION_DASHBOARD_UPDATE, PERMISSION_DASHBOARD_CREATE, PERMISSION_DASHBOARD_DELETE, PERMISSION_DASHBOARD_BOX_READ,
//                PERMISSION_DASHBOARD_BOX_UPDATE, PERMISSION_DASHBOARD_BOX_CREATE, PERMISSION_DASHBOARD_BOX_DELETE,
//                PERMISSION_DASHBOARD_BOX_TYPE_READ, PERMISSION_DASHBOARD_BOX_TYPE_UPDATE, PERMISSION_DASHBOARD_BOX_TYPE_CREATE,
//                PERMISSION_DASHBOARD_BOX_TYPE_DELETE), permissionRepository.findAllDistinctByOrderById());
//    }

    @Test
    public void testGetSinglePermission() throws Exception {
        Permission permission = permissionRepository.findOne(PERMISSION_USER_DELETE_ID);
        PERMISSION_MODEL_MATCHER.assertEquals(PERMISSION_USER_DELETE, permission);
    }

    @Test
    public void testGetAllPermissions() throws Exception {
        Collection<Permission> permissions = permissionRepository.findAll();
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(PERMISSION_USER_READ, PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE, PERMISSION_USER_DELETE, PERMISSION_USER_READ_OWN, PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ, PERMISSION_ROLE_UPDATE, PERMISSION_ROLE_CREATE, PERMISSION_ROLE_DELETE, PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE, PERMISSION_PERMISSION_CREATE, PERMISSION_PERMISSION_DELETE, PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE, PERMISSION_CRUD_CLASS_META_DATA_CREATE, PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ, PERMISSION_CRUD_META_FORM_DATA_UPDATE, PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE, PERMISSION_CRUD_META_GRID_DATA_READ, PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE, PERMISSION_CRUD_META_GRID_DATA_DELETE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE, PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE, PERMISSION_CUSTOMER_READ, PERMISSION_CUSTOMER_UPDATE,
                PERMISSION_CUSTOMER_CREATE, PERMISSION_CUSTOMER_DELETE, PERMISSION_CUSTOMER_CONTACT_READ, PERMISSION_CUSTOMER_CONTACT_UPDATE,
                PERMISSION_CUSTOMER_CONTACT_CREATE, PERMISSION_CUSTOMER_CONTACT_DELETE, PERMISSION_DASHBOARD_READ,
                PERMISSION_DASHBOARD_UPDATE, PERMISSION_DASHBOARD_CREATE, PERMISSION_DASHBOARD_DELETE, PERMISSION_DASHBOARD_BOX_READ,
                PERMISSION_DASHBOARD_BOX_UPDATE, PERMISSION_DASHBOARD_BOX_CREATE, PERMISSION_DASHBOARD_BOX_DELETE,
                PERMISSION_DASHBOARD_BOX_TYPE_READ, PERMISSION_DASHBOARD_BOX_TYPE_UPDATE, PERMISSION_DASHBOARD_BOX_TYPE_CREATE,
                PERMISSION_DASHBOARD_BOX_TYPE_DELETE), permissions);
    }

    @Test
    public void testUpdatePermission() throws Exception {
        Permission updated = permissionRepository.findOne(4L);
        updated.setName("WITHOUT_ACCESS");
        permissionRepository.save(updated);
        PERMISSION_MODEL_MATCHER.assertEquals(updated, permissionRepository.findOne(PERMISSION_USER_DELETE_ID));
    }
}