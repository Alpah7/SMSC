package io.smsc.repository.permission;

import io.smsc.model.Permission;
import io.smsc.AbstractTest;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.test.context.support.WithMockUser;

import java.util.Arrays;
import java.util.Collection;

import static io.smsc.test_data.PermissionTestData.*;

@WithMockUser(username="Admin",roles = {"ADMIN"})
public class PermissionJPATest extends AbstractTest {

    @Autowired
    private PermissionRepository permissionRepository;

    @Test
    public void testDeletePermission() throws Exception {
        permissionRepository.delete(PERMISSION_USER_DELETE_ID);
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(PERMISSION_USER_READ,PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE,PERMISSION_USER_READ_OWN,PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ,PERMISSION_ROLE_UPDATE,PERMISSION_ROLE_CREATE,PERMISSION_ROLE_DELETE,PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE,PERMISSION_PERMISSION_CREATE,PERMISSION_PERMISSION_DELETE,PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE,PERMISSION_CRUD_CLASS_META_DATA_CREATE,PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ,PERMISSION_CRUD_META_FORM_DATA_UPDATE,PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE,PERMISSION_CRUD_META_GRID_DATA_READ,PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE,PERMISSION_CRUD_META_GRID_DATA_DELETE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE),permissionRepository.findAllDistinctByOrderById());
    }

    @Test
    public void testSavePermission() throws Exception {
        Permission newPermission = new Permission(null,"UNLIMITED");
        Permission created = permissionRepository.save(newPermission);
        newPermission.setId(created.getId());
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(newPermission,PERMISSION_USER_READ,PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE,PERMISSION_USER_DELETE,PERMISSION_USER_READ_OWN,PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ,PERMISSION_ROLE_UPDATE,PERMISSION_ROLE_CREATE,PERMISSION_ROLE_DELETE,PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE,PERMISSION_PERMISSION_CREATE,PERMISSION_PERMISSION_DELETE,PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE,PERMISSION_CRUD_CLASS_META_DATA_CREATE,PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ,PERMISSION_CRUD_META_FORM_DATA_UPDATE,PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE,PERMISSION_CRUD_META_GRID_DATA_READ,PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE,PERMISSION_CRUD_META_GRID_DATA_DELETE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE),
                permissionRepository.findAllDistinctByOrderById());
    }

    @Test
    public void testGetSinglePermission() throws Exception {
        Permission permission = permissionRepository.findOne(PERMISSION_USER_DELETE_ID);
        PERMISSION_MODEL_MATCHER.assertEquals(PERMISSION_USER_DELETE,permission);
    }

    @Test
    public void testGetAllPermissions() throws Exception {
        Collection<Permission> permissions = permissionRepository.findAllDistinctByOrderById();
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(PERMISSION_USER_READ,PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE,PERMISSION_USER_DELETE,PERMISSION_USER_READ_OWN,PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ,PERMISSION_ROLE_UPDATE,PERMISSION_ROLE_CREATE,PERMISSION_ROLE_DELETE,PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE,PERMISSION_PERMISSION_CREATE,PERMISSION_PERMISSION_DELETE,PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE,PERMISSION_CRUD_CLASS_META_DATA_CREATE,PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ,PERMISSION_CRUD_META_FORM_DATA_UPDATE,PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE,PERMISSION_CRUD_META_GRID_DATA_READ,PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE,PERMISSION_CRUD_META_GRID_DATA_DELETE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE),permissions);
    }

    @Test
    public void testUpdatePermission() throws Exception {
        Permission updated = new Permission(PERMISSION_USER_DELETE);
        updated.setName("WITHOUT_ACCESS");
        permissionRepository.save(updated);
        PERMISSION_MODEL_MATCHER.assertEquals(updated, permissionRepository.findOne(PERMISSION_USER_DELETE_ID));
    }

    @Test(expected = DataIntegrityViolationException.class)
    public void testDuplicatePermissionNameSave() throws Exception {
        Permission newPermission = new Permission(PERMISSION_USER_DELETE);
        newPermission.setId(null);
        permissionRepository.save(newPermission);
        PERMISSION_MODEL_MATCHER.assertCollectionEquals(Arrays.asList(PERMISSION_USER_READ,PERMISSION_USER_UPDATE,
                PERMISSION_USER_CREATE,PERMISSION_USER_DELETE,PERMISSION_USER_READ_OWN,PERMISSION_USER_UPDATE_OWN,
                PERMISSION_ROLE_READ,PERMISSION_ROLE_UPDATE,PERMISSION_ROLE_CREATE,PERMISSION_ROLE_DELETE,PERMISSION_PERMISSION_READ,
                PERMISSION_PERMISSION_UPDATE,PERMISSION_PERMISSION_CREATE,PERMISSION_PERMISSION_DELETE,PERMISSION_CRUD_CLASS_META_DATA_READ,
                PERMISSION_CRUD_CLASS_META_DATA_UPDATE,PERMISSION_CRUD_CLASS_META_DATA_CREATE,PERMISSION_CRUD_CLASS_META_DATA_DELETE,
                PERMISSION_CRUD_META_FORM_DATA_READ,PERMISSION_CRUD_META_FORM_DATA_UPDATE,PERMISSION_CRUD_META_FORM_DATA_CREATE,
                PERMISSION_CRUD_META_FORM_DATA_DELETE,PERMISSION_CRUD_META_GRID_DATA_READ,PERMISSION_CRUD_META_GRID_DATA_UPDATE,
                PERMISSION_CRUD_META_GRID_DATA_CREATE,PERMISSION_CRUD_META_GRID_DATA_DELETE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_READ,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_UPDATE,PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_CREATE,
                PERMISSION_META_DATA_PROPERTY_BINDING_PARAMETER_DELETE),
                permissionRepository.findAllDistinctByOrderById());
    }
}